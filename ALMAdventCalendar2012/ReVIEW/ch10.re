= 10日目 「Windowsストアアプリ」で始める「継続的なフィードバック」 @<href>{https://twitter.com/kaorun55,@kaorun55}
このエントリは「@<href>{http://atnd.org/events/34118,ALM Advent Calendar}」10日目への参加記事です。

10月にWindows 8が正式にリリースされ、新しいアプリケーションスタイルである「Windowsストアアプリ」が利用、開発できるようになりました。

今回は、「Windowsストアアプリ」の開発と、Visual Studioのコンセプトの一つである「継続的なフィードバック」について書いてみます。一応、免責として入れておくと、本内容は個人的な見解です。

開発者から見たざっくりとした開発の流れは次のようになっています。

//image[1][Windowsストアアプリ開発のイメージ]
Visual Studioで開発し、出来上がったアプリケーションを審査に提出し、審査で合格アプリケーションのみが、Windowsストアに公開されます。このため、Windowsストアで公開するアプリケーションは、従来のように手元で開発してそのまま公開ができず、@<href>{http://msdn.microsoft.com/ja-JP/library/windows/apps/hh694083.aspx,Windows 8 アプリの要件}を満たす必要があります。

この審査がなかなか大変で、Windowsストアアプリの肝は審査を合格に導くアプリケーションづくりだと感じています(あくまでも個人の見解ですｗ)。僕自身、少し前からアプリを作って審査に出していたのですが、どうしても通らずアプリ開発は中断していました。しかし、最近になってアプローチを変えてみたところあっさりと審査に合格することができました。

どうしたかというと、@<kw>{最低限の機能}だけ実装したのです。

最初に合格したアプリは「@<href>{http://apps.microsoft.com/webpdp/ja-JP/app/kinect-for-windows-sdk-v1-6-c/0240497c-9114-47ef-aa84-04b39f57c46a,Windows ストア の Windows 用 Kinect for Windows SDK v1.6 概要 C#編 アプリ}」なのですが、リリース1ではコンテンツを並べて表示する機能しか実装していません。デザイン的に不安要素はありましたが、特に問題なく合格しました。このアプリは有料版としてリリースしたので、次のリリース2で試用版機能を追加し、気軽に試せるアプリ環境を作りました。ここまでで、試用版機能付きの有料電子書籍アプリの下地ができたので、コンテンツを差し替えることによって、横展開が可能になります。そうしてリリースしたアプリが「@<href>{http://apps.microsoft.com/webpdp/ja-JP/app/kinect-for-windows-sdk-v1-6-c/8c55ff9f-a76e-4cf9-abb4-b875f762878f,Windows ストア の Windows 用 Kinect for Windows SDK v1.6 概要 C++編 アプリ}」です。このアプリはC#編のリリース1相当機能ですが、コードの共通化を行うことで、機能的に追いつくことは簡単にできます。また、すでに審査に合格済みのアプリケーションがベースであるために、公開までの難易度の下がってくることでしょう。

ちなみに、小さく審査に提出するのはいいが、公開はまとまった機能で行いたいという要望もあるでしょう。小刻みに更新すると、ユーザーの更新の手間がかかるのでリリースをまとめたい場合もあります。その場合には、審査提出時に公開日を指定することができるので、この日付をリリース予定日などにしておくと良いかと思います。その上で次のリリースを認定に送り少しずつ機能を増やしていきます。

//image[3][アプリ公開日の設定]

Windowsの世界で審査を通したアプリ公開はWindows 8が初めてですが、「審査」に対する経験値を増やすためにも「小さく始める」ことが意外と大事なのだと感じました。「小さく始める」ことを「フィーチャーごとに実装してリリース」という少し具体的な言葉に置き換えると、未体験ゾーンであった審査ありのWindowsアプリケーションに対して「各フィーチャーレベルで審査に通るか」ということを一歩ずつ確認しながら進むことは、Windowsストアアプリ開発を進める上で必要であると認識しました。特にWindowsストアアプリ開発をビジネスとする場合には、フィーチャーや実装する機能に対して、審査への難易度を見積もることができるため、自社開発にしろ、受託開発にしろ、これらの経験値はスケジューリングのための重要な材料になるのではないでしょうか。


このようにWindowsストアアプリの開発を通して、Visual Studioのコンセプトの一つである「継続的なフィードバック」を体験してみるのはいかがでしょうか。